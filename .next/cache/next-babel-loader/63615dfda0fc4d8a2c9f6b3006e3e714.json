{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/juji/works/juji/components/WorkDetails/ImagePane.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport Jimage from 'react-jimage';\nimport Slider from \"react-slick\";\nimport { MdSearch, MdClose } from \"react-icons/md\";\nimport { useGlobalContext } from 'contexts/GlobalContext';\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n\n  .image-container{\n    flex: ${p => p.fullScreen ? '1 1 auto' : '0 0 auto'};\n    position: relative;\n    padding-top:56.25%;\n\n    .image-full{\n      position: absolute;\n      top:0;\n      left:0;\n      width: 100%;\n      height: 100%;\n      display: ${p => p.fullScreen ? 'block' : 'none'};\n    }\n\n    .image-slider{\n      position: absolute;\n      top:0;\n      left:0;\n      width: 100%;\n      height: 100%;\n      display: ${p => p.fullScreen ? 'none' : 'block'};\n\n      .slick-slider, .slick-list, .slick-track{\n        height: 100%;\n      }\n\n      .slick-slide>div{\n        height: 100%;\n      }\n\n      .slick-arrow{\n        display:none !important;\n      }\n\n      .image-in-slider{\n        width: 100%;\n        height: 100%;\n        object-fit: contain;\n        object-position: center center;\n        user-select: none;\n      }\n\n      .image-in-slider-container{\n        width: 100%;\n        height: 100%;\n        overflow: hidden;\n        position: relative;\n        user-select: none;\n      }\n    }\n  }\n\n  .image-text{\n    position: relative;\n    flex: 0 0 auto;\n    display: flex;\n    background-color: #171717;\n    padding: 8px 21px;\n    p:first-child{ flex: 1 1 auto; margin: 0; }\n    p:nth-child(2){ flex: 0 0 auto; margin: 0; }\n    a{\n      flex: 0 0 auto;\n      font-size: 25px;\n      margin-left: 21px;\n    }\n  }\n\n  @media only screen and (min-width: 1024px) {\n    .image-container{\n      flex: 1 1 auto;\n      padding-top:0;\n    }\n  }\n\n`;\nconst sliderSettings = {\n  dots: false,\n  infinite: false,\n  speed: 200\n};\nexport default (props => {\n  const {\n    images,\n    onFullScreen\n  } = props;\n  const {\n    0: index,\n    1: setIndex\n  } = useState(0);\n  const {\n    0: fullScreen,\n    1: setFullScreen\n  } = useState(0);\n  const {\n    touch\n  } = useGlobalContext();\n\n  const resize = () => {\n    onFullScreen && onFullScreen(!fullScreen);\n    setFullScreen(!fullScreen);\n  };\n\n  return __jsx(Container, {\n    fullScreen: fullScreen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"image-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"image-full\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, __jsx(Jimage, {\n    image: images[index].url,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  })), __jsx(\"div\", {\n    className: \"image-slider\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, __jsx(Slider, _extends({}, sliderSettings, {\n    beforeChange: (old, newIdx) => {\n      setIndex(newIdx);\n    },\n    className: \"slider-component\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }), images.map(v => __jsx(\"div\", {\n    className: \"image-in-slider-container\",\n    key: v.url,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, __jsx(\"img\", {\n    alt: v.title,\n    className: \"image-in-slider\",\n    src: v.url,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  })))))), __jsx(\"div\", {\n    className: \"image-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, fullScreen ? '' : images[index].title), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, fullScreen ? touch ? 'pinch to zoom, touch to drag.' : 'zoom with mouse wheel, drag with mouse.' : `image ${index + 1} of ${images.length}`), __jsx(\"a\", {\n    role: \"button\",\n    onClick: resize,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, fullScreen ? __jsx(MdClose, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }) : __jsx(MdSearch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }))));\n});","map":{"version":3,"sources":["/Users/juji/works/juji/components/WorkDetails/ImagePane.js"],"names":["React","useState","styled","Jimage","Slider","MdSearch","MdClose","useGlobalContext","Container","div","p","fullScreen","sliderSettings","dots","infinite","speed","props","images","onFullScreen","index","setIndex","setFullScreen","touch","resize","url","old","newIdx","map","v","title","length"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\nimport styled from 'styled-components'\nimport Jimage from 'react-jimage'\nimport Slider from \"react-slick\";\n\nimport { MdSearch, MdClose } from \"react-icons/md\";\nimport { useGlobalContext } from 'contexts/GlobalContext'\n\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n\n  .image-container{\n    flex: ${p => p.fullScreen ? '1 1 auto' : '0 0 auto'};\n    position: relative;\n    padding-top:56.25%;\n\n    .image-full{\n      position: absolute;\n      top:0;\n      left:0;\n      width: 100%;\n      height: 100%;\n      display: ${p => p.fullScreen ? 'block' : 'none'};\n    }\n\n    .image-slider{\n      position: absolute;\n      top:0;\n      left:0;\n      width: 100%;\n      height: 100%;\n      display: ${p => p.fullScreen ? 'none' : 'block'};\n\n      .slick-slider, .slick-list, .slick-track{\n        height: 100%;\n      }\n\n      .slick-slide>div{\n        height: 100%;\n      }\n\n      .slick-arrow{\n        display:none !important;\n      }\n\n      .image-in-slider{\n        width: 100%;\n        height: 100%;\n        object-fit: contain;\n        object-position: center center;\n        user-select: none;\n      }\n\n      .image-in-slider-container{\n        width: 100%;\n        height: 100%;\n        overflow: hidden;\n        position: relative;\n        user-select: none;\n      }\n    }\n  }\n\n  .image-text{\n    position: relative;\n    flex: 0 0 auto;\n    display: flex;\n    background-color: #171717;\n    padding: 8px 21px;\n    p:first-child{ flex: 1 1 auto; margin: 0; }\n    p:nth-child(2){ flex: 0 0 auto; margin: 0; }\n    a{\n      flex: 0 0 auto;\n      font-size: 25px;\n      margin-left: 21px;\n    }\n  }\n\n  @media only screen and (min-width: 1024px) {\n    .image-container{\n      flex: 1 1 auto;\n      padding-top:0;\n    }\n  }\n\n`\n\nconst sliderSettings = {\n  dots: false,\n  infinite: false,\n  speed: 200\n}\n\nexport default props => {\n\n  const { images, onFullScreen } = props;\n  const [ index, setIndex ] = useState(0);\n  const [ fullScreen, setFullScreen ] = useState(0);\n  const { touch } = useGlobalContext();\n\n  const resize = () => {\n    onFullScreen && onFullScreen(!fullScreen)\n    setFullScreen(!fullScreen)\n  }\n\n\n  return <Container fullScreen={fullScreen}>\n    <div className=\"image-container\">\n      <div className=\"image-full\">\n        <Jimage image={images[index].url} />\n      </div>\n      <div className=\"image-slider\">\n        <Slider\n          {...sliderSettings}\n          beforeChange={(old,newIdx) => {\n            setIndex(newIdx)\n          }}\n          className=\"slider-component\"\n        >{images.map(v => <div className=\"image-in-slider-container\" key={v.url}>\n          <img alt={v.title} className=\"image-in-slider\" src={v.url} />\n        </div>)}</Slider>\n      </div>\n    </div>\n    <div className=\"image-text\">\n      <p>{fullScreen ? '' : images[index].title}</p>\n      <p>{ fullScreen ? (\n        touch ? 'pinch to zoom, touch to drag.' : 'zoom with mouse wheel, drag with mouse.'\n      ) : `image ${index+1} of ${images.length}`}</p>\n      <a role=\"button\" onClick={resize}>\n        {fullScreen ? <MdClose /> : <MdSearch />}\n      </a>\n    </div>\n  </Container>\n\n\n}\n"]},"metadata":{},"sourceType":"module"}