{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport Jimage from 'react-jimage';\nimport Slider from \"react-slick\";\nimport { MdSearch, MdClose } from \"react-icons/md\";\nimport { useGlobalContext } from 'contexts/GlobalContext';\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n\n  .image-container{\n    flex: ${p => p.fullScreen ? '1 1 auto' : '0 0 auto'};\n    position: relative;\n    padding-top:56.25%;\n\n    .image-full{\n      position: absolute;\n      top:0;\n      left:0;\n      width: 100%;\n      height: 100%;\n      display: ${p => p.fullScreen ? 'block' : 'none'};\n    }\n\n    .image-slider{\n      position: absolute;\n      top:0;\n      left:0;\n      width: 100%;\n      height: 100%;\n      display: ${p => p.fullScreen ? 'none' : 'block'};\n\n      .slick-slider, .slick-list, .slick-track{\n        height: 100%;\n      }\n\n      .slick-slide>div{\n        height: 100%;\n      }\n\n      .slick-arrow{\n        display:none !important;\n      }\n\n      .image-in-slider{\n        width: 100%;\n        height: 100%;\n        object-fit: contain;\n        object-position: center center;\n        user-select: none;\n      }\n\n      .image-in-slider-container{\n        width: 100%;\n        height: 100%;\n        overflow: hidden;\n        position: relative;\n        user-select: none;\n      }\n    }\n  }\n\n  .image-text{\n    position: relative;\n    flex: 0 0 auto;\n    display: flex;\n    background-color: #171717;\n    padding: 8px 21px;\n    p:first-child{ flex: 1 1 auto; margin: 0; }\n    p:nth-child(2){ flex: 0 0 auto; margin: 0; }\n    a{\n      flex: 0 0 auto;\n      font-size: 25px;\n      margin-left: 21px;\n    }\n  }\n\n  @media only screen and (min-width: 1024px) {\n    .image-container{\n      flex: 1 1 auto;\n      padding-top:0;\n    }\n  }\n\n`;\nconst sliderSettings = {\n  dots: false,\n  infinite: false,\n  speed: 200\n};\nexport default (props => {\n  const {\n    images,\n    onFullScreen\n  } = props;\n  const {\n    0: index,\n    1: setIndex\n  } = useState(0);\n  const {\n    0: fullScreen,\n    1: setFullScreen\n  } = useState(0);\n  const {\n    touch\n  } = useGlobalContext();\n\n  const resize = () => {\n    onFullScreen && onFullScreen(!fullScreen);\n    setFullScreen(!fullScreen);\n  };\n\n  return __jsx(Container, {\n    fullScreen: fullScreen\n  }, __jsx(\"div\", {\n    className: \"image-container\"\n  }, __jsx(\"div\", {\n    className: \"image-full\"\n  }, __jsx(Jimage, {\n    image: images[index].url\n  })), __jsx(\"div\", {\n    className: \"image-slider\"\n  }, __jsx(Slider, _extends({}, sliderSettings, {\n    beforeChange: (old, newIdx) => {\n      setIndex(newIdx);\n    },\n    className: \"slider-component\"\n  }), images.map(v => __jsx(\"div\", {\n    className: \"image-in-slider-container\",\n    key: v.url\n  }, __jsx(\"img\", {\n    alt: v.title,\n    className: \"image-in-slider\",\n    src: v.url\n  })))))), __jsx(\"div\", {\n    className: \"image-text\"\n  }, __jsx(\"p\", null, fullScreen ? '' : images[index].title), __jsx(\"p\", null, fullScreen ? touch ? 'pinch to zoom, touch to drag.' : 'zoom with mouse wheel, drag with mouse.' : `image ${index + 1} of ${images.length}`), __jsx(\"a\", {\n    role: \"button\",\n    onClick: resize\n  }, fullScreen ? __jsx(MdClose, null) : __jsx(MdSearch, null))));\n});","map":null,"metadata":{},"sourceType":"module"}