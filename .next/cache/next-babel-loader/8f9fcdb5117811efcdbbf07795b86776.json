{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    .text-pane{\\n      display: none;\\n      flex: 1 1 auto;\\n    }\\n    .image-pane{{\\n      flex: 1 1 auto;\\n    }\\n  \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: column;\\n  width: 100%;\\n\\n  @media only screen and (min-width: 1024px) {\\n    height: 100vh;\\n    overflow: hidden;\\n  }\\n\\n  .work-header{\\n    background: #000000;\\n    flex: 0 0 auto;\\n    display: flex;\\n    align-items: center;\\n    padding: 21px;\\n    h1{\\n      flex: 1 1 auto;\\n      margin:0;\\n      font-size: 21px;\\n      font-family: 'Source Code Pro', monospace;\\n    }\\n    a{\\n      flex: 0 0 auto;\\n      margin:0;\\n      font-size: 34px;\\n    }\\n    border-bottom: 1px solid #05101d;\\n  }\\n\\n  .image-pane{\\n    flex: 0 0 auto;\\n    background: #03080e;\\n  }\\n\\n  .text-pane{\\n    flex: 1 1 auto;\\n    box-sizing: border-box;\\n    background-color: #010102;\\n\\n\\n\\n    .work-header{\\n      display: none;\\n    }\\n  }\\n\\n  @media only screen and (min-width: 1024px) {\\n    flex-direction: row;\\n\\n    &>.work-header{\\n      display: none;\\n    }\\n\\n    .image-pane{\\n      flex: 1 1 auto;\\n      padding-top:0;\\n    }\\n\\n    .text-pane{\\n      width: 37.31%;\\n      flex: 0 0 auto;\\n\\n      .work-header{\\n        display: flex;\\n      }\\n    }\\n  }\\n\\n  \", \"\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useMemo, useState } from 'react';\nimport data from 'data/works';\nimport styled, { css } from 'styled-components';\nimport Link from 'next/link';\nimport Texts from './Texts';\nimport { useTransition, animated } from 'react-spring';\nimport ImagePaneComp from './ImagePane';\nvar WorkDetail = styled.div(_templateObject(), function (p) {\n  return p.fullScreen ? css(_templateObject2()) : null;\n});\n\nvar WorkHeader = function WorkHeader(props) {\n  var work = props.work;\n  var transitions = useTransition(true, null, {\n    from: {\n      y: -100\n    },\n    enter: {\n      y: 0\n    },\n    leave: {\n      y: -100\n    }\n  });\n  return transitions.map(function (_ref) {\n    var item = _ref.item,\n        key = _ref.key,\n        y = _ref.props.y;\n    return item && __jsx(animated.div, {\n      key: key,\n      className: \"work-header\",\n      style: {\n        transform: y.interpolate(function (y) {\n          return \"translate3d(0, \".concat(y, \"%, 0)\");\n        })\n      }\n    }, __jsx(\"h1\", null, work.title), __jsx(Link, {\n      href: \"/work\"\n    }, __jsx(\"a\", null, \"\\xD7\")));\n  });\n};\n\nvar ImagePane = function ImagePane(props) {\n  var work = props.work,\n      onFullScreen = props.onFullScreen;\n  var transitions = useTransition(true, null, {\n    from: {\n      x: -100\n    },\n    enter: {\n      x: 0\n    },\n    leave: {\n      x: -100\n    }\n  });\n  return transitions.map(function (_ref2) {\n    var item = _ref2.item,\n        key = _ref2.key,\n        x = _ref2.props.x;\n    return item && __jsx(animated.div, {\n      key: key,\n      className: \"image-pane\",\n      style: {\n        transform: x.interpolate(function (x) {\n          return \"translate3d(\".concat(x, \"%, 0, 0)\");\n        })\n      }\n    }, __jsx(ImagePaneComp, {\n      onFullScreen: onFullScreen,\n      images: work.images\n    }));\n  });\n};\n\nvar TextPane = function TextPane(props) {\n  var work = props.work,\n      text = props.text;\n  var transitions = useTransition(true, null, {\n    from: {\n      x: 100\n    },\n    enter: {\n      x: 0\n    },\n    leave: {\n      x: 100\n    }\n  });\n  return transitions.map(function (_ref3) {\n    var item = _ref3.item,\n        key = _ref3.key,\n        x = _ref3.props.x;\n    return item && __jsx(animated.div, {\n      key: key,\n      className: \"text-pane\",\n      style: {\n        transform: x.interpolate(function (x) {\n          return \"translate3d(\".concat(x, \"%, 0, 0)\");\n        })\n      }\n    }, __jsx(WorkHeader, {\n      work: work\n    }), __jsx(Texts, {\n      text: text\n    }));\n  });\n};\n\nexport default (function (props) {\n  var id = props.id,\n      text = props.text;\n  var work = useMemo(function () {\n    return data.find(function (v) {\n      return v.id === id;\n    });\n  }, [id]);\n  if (!work) return null;\n\n  var _useState = useState(false),\n      fullScreen = _useState[0],\n      setFullScreen = _useState[1];\n\n  var onFullScreen = function onFullScreen(bool) {\n    return setFullScreen(bool);\n  };\n\n  return __jsx(WorkDetail, {\n    fullScreen: fullScreen\n  }, __jsx(WorkHeader, {\n    work: work\n  }), __jsx(ImagePane, {\n    onFullScreen: onFullScreen,\n    work: work\n  }), __jsx(TextPane, {\n    work: work,\n    text: text\n  }));\n});","map":null,"metadata":{},"sourceType":"module"}