{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport data from 'data/tech';\nimport Loader from 'components/Loader';\nimport { Tooltip } from 'react-tippy';\nimport { useTrail, animated } from 'react-spring';\nimport styled, { css } from 'styled-components';\nexport const Container = styled.div`\n  .tech-group{\n    margin-bottom: 34px;\n\n    &>div{\n      display: inline-block;\n    }\n\n    @media only screen and (max-width: 584px) {\n      &>div{\n        display: block;\n      }\n    }\n  }\n\n  .tech-group:last-child{\n    margin-bottom: 0px;\n  }\n`;\nexport const TechThumb = styled.a`\n\n  display: inline-block;\n  width: 150px;\n  height: 150px;\n  background-color: #010304;\n  background-position: center center;\n  background-size: 70% auto;\n  background-repeat: no-repeat;\n  margin-right: 8px;\n  margin-bottom: 8px;\n\n  transition: all 200ms;\n\n  ${props => props.image && css`\n    background-image: url('${props.image}');\n  `}\n\n  &:hover{\n    background-size: 80% auto;\n  }\n\n  &#nodejs{\n    background-size: 50% auto;\n  }\n  &#nodejs:hover{\n    background-size: 60% auto;\n  }\n\n  &#docker{\n    background-size: 90% auto;\n  }\n  &#docker:hover{\n    background-size: 100% auto;\n  }\n\n  &#electron{\n    background-size: 100% auto;\n    width: 300px;\n  }\n  &#electron:hover{\n    background-size: 110% auto;\n  }\n\n  &#html5{\n    background-size: 50% auto;\n  }\n  &#html5:hover{\n    background-size: 60% auto;\n  }\n\n  &#css3{\n    background-size: 50% auto;\n  }\n  &#css3:hover{\n    background-size: 60% auto;\n  }\n\n  &#elastic{\n    width: 300px\n  }\n\n  &#nats{\n    width: 300px\n  }\n\n  &#do{\n    background-size: 80% auto;\n  }\n  &#do:hover{\n    background-size: 90% auto;\n  }\n\n  &#beanstalk{\n    background-size: 40% auto;\n  }\n  &#beanstalk:hover{\n    background-size: 50% auto;\n  }\n\n  &#stripe,&#algolia,&#twilio,&#mailgun,&#sendgrid{\n    width: 200px;\n  }\n\n  transition: all 500ms;\n\n  @media only screen and (max-width: 584px) {\n\n    transition: all 200ms;\n    background-size: auto 80%;\n    padding-left: 0px;\n    padding-right: 0px;\n\n    &:hover{\n      background-size: auto 90%;\n    }\n\n    &,&#stripe,&#algolia,&#twilio,&#mailgun,&#sendgrid,&#elastic,&#nats,&#electron{\n      width: 100%;\n    }\n\n    &#express,&#algolia,&#mailgun,&#sendgrid{\n      background-size: auto 30%;\n    }\n\n    &#express:hover,&#algolia:hover,&#mailgun:hover,&#sendgrid:hover{\n      background-size: auto 40%;\n    }\n\n    &#adonis,&#nats,&#elastic{\n      background-size: auto 50%;\n    }\n    &#adonis:hover,&#nats:hover,&#elastic:hover{\n      background-size: auto 60%;\n    }\n\n    &#nodejs,&#next,&#socketio,&#beanstalk,\n    &#mailchimp,&#github,&#bitbucket{\n      background-size: auto 60%;\n    }\n\n    &#nodejs:hover,&#next:hover,&#socketio:hover,&#beanstalk:hover,\n    &#mailchimp:hover,&#github:hover,&#bitbucket:hover{\n      background-size: auto 70%;\n    }\n\n    &#html5,&#css3{\n      background-size: auto 80%;\n    }\n\n    &#html5:hover,&#css3:hover{\n      background-size: auto 90%;\n    }\n\n    &#docker,&#do,&#stripe{\n      background-size: auto 90%;\n    }\n\n    &#docker:hover,&#do:hover,&#stripe:hover{\n      background-size: auto 100%;\n    }\n\n  }\n\n`;\n\nconst TechGroup = props => {\n  const {\n    group\n  } = props;\n  const trail = useTrail(group.length, {\n    from: {\n      opacity: 0,\n      x: 21\n    },\n    opacity: 1,\n    x: 0\n  });\n  return trail.map((_ref, index) => {\n    let {\n      x,\n      height\n    } = _ref,\n        rest = _objectWithoutProperties(_ref, [\"x\", \"height\"]);\n\n    return __jsx(animated.div, {\n      key: group[index].id,\n      style: _objectSpread({}, rest, {\n        transform: x.interpolate(x => `translate3d(${x}px,0px,0px)`)\n      })\n    }, __jsx(Tooltip, {\n      title: group[index].title\n    }, __jsx(TechThumb, {\n      className: \"tech-thumb\",\n      id: group[index].id,\n      target: \"_blank\",\n      href: group[index].url,\n      image: group[index].image\n    })));\n  });\n};\n\nconst Tech = props => {\n  const {\n    onStart\n  } = props;\n  const trail = useTrail(data.length, {\n    delay: 500,\n    onStart\n  });\n  return trail.map((style, index) => __jsx(animated.div, {\n    key: `techgroup_${index}`,\n    className: \"tech-group\"\n  }, __jsx(TechGroup, {\n    group: data[index]\n  })));\n};\n\nexport default (props => {\n  const {\n    0: loading,\n    1: set\n  } = useState(true);\n  const {\n    0: draw,\n    1: setDraw\n  } = useState(false);\n\n  const onStart = () => {\n    set(false);\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      setDraw(true);\n    }, 500);\n  }, []);\n  return __jsx(Container, null, __jsx(\"h2\", null, __jsx(\"span\", {\n    className: \"blue\"\n  }, \"Technologies\"), \"\\xA0\\xA0\", loading ? __jsx(Loader, null) : null, __jsx(\"br\", null), __jsx(\"small\", null, __jsx(\"small\", null, __jsx(\"small\", null, \"Techs i'm familiar with\")))), __jsx(\"br\", null), draw ? __jsx(Tech, {\n    onStart: onStart\n  }) : null);\n});","map":null,"metadata":{},"sourceType":"module"}