{"ast":null,"code":"var _jsxFileName = \"/Users/juji/works/juji/components/WorkDetails/index.js\";\nvar __jsx = React.createElement;\nimport React, { useMemo, useState } from 'react';\nimport data from 'data/works';\nimport styled, { css } from 'styled-components';\nimport Link from 'next/link';\nimport Texts from './Texts';\nimport { useTransition, animated } from 'react-spring';\nimport ImagePaneComp from './ImagePane';\nconst WorkDetail = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n\n  @media only screen and (min-width: 1024px) {\n    height: 100vh;\n    overflow: hidden;\n  }\n\n  .work-header{\n    background: #000000;\n    flex: 0 0 auto;\n    display: flex;\n    align-items: center;\n    padding: 21px;\n    h1{\n      flex: 1 1 auto;\n      margin:0;\n      font-size: 21px;\n      font-family: 'Source Code Pro', monospace;\n    }\n    a{\n      flex: 0 0 auto;\n      margin:0;\n      font-size: 34px;\n    }\n    border-bottom: 1px solid #05101d;\n  }\n\n  .image-pane{\n    flex: 0 0 auto;\n    background: #03080e;\n  }\n\n  .text-pane{\n    flex: 1 1 auto;\n    box-sizing: border-box;\n    background-color: #010102;\n\n\n\n    .work-header{\n      display: none;\n    }\n  }\n\n  @media only screen and (min-width: 1024px) {\n    flex-direction: row;\n\n    &>.work-header{\n      display: none;\n    }\n\n    .image-pane{\n      flex: 1 1 auto;\n      padding-top:0;\n    }\n\n    .text-pane{\n      width: 37.31%;\n      flex: 0 0 auto;\n\n      .work-header{\n        display: flex;\n      }\n    }\n  }\n\n  ${p => p.fullScreen ? css`\n    .text-pane{\n      display: none;\n      flex: 1 1 auto;\n    }\n    .image-pane{{\n      flex: 1 1 auto;\n    }\n  ` : null}\n`;\n\nconst WorkHeader = props => {\n  const {\n    work\n  } = props;\n  const transitions = useTransition(true, null, {\n    from: {\n      y: -100\n    },\n    enter: {\n      y: 0\n    },\n    leave: {\n      y: -100\n    }\n  });\n  return transitions.map(({\n    item,\n    key,\n    props: {\n      y\n    }\n  }) => item && __jsx(animated.div, {\n    key: key,\n    className: \"work-header\",\n    style: {\n      transform: y.interpolate(y => `translate3d(0, ${y}%, 0)`)\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, work.title), __jsx(Link, {\n    href: \"/work\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, \"\\xD7\"))));\n};\n\nconst ImagePane = props => {\n  const {\n    work,\n    onFullScreen\n  } = props;\n  const transitions = useTransition(true, null, {\n    from: {\n      x: -100\n    },\n    enter: {\n      x: 0\n    },\n    leave: {\n      x: -100\n    }\n  });\n  return transitions.map(({\n    item,\n    key,\n    props: {\n      x\n    }\n  }) => item && __jsx(animated.div, {\n    key: key,\n    className: \"image-pane\",\n    style: {\n      transform: x.interpolate(x => `translate3d(${x}%, 0, 0)`)\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, __jsx(ImagePaneComp, {\n    onFullScreen: onFullScreen,\n    images: work.images,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  })));\n};\n\nconst TextPane = props => {\n  const {\n    work,\n    text\n  } = props;\n  const transitions = useTransition(true, null, {\n    from: {\n      x: 100\n    },\n    enter: {\n      x: 0\n    },\n    leave: {\n      x: 100\n    }\n  });\n  return transitions.map(({\n    item,\n    key,\n    props: {\n      x\n    }\n  }) => item && __jsx(animated.div, {\n    key: key,\n    className: \"text-pane\",\n    style: {\n      transform: x.interpolate(x => `translate3d(${x}%, 0, 0)`)\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, __jsx(WorkHeader, {\n    work: work,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }), __jsx(Texts, {\n    text: text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  })));\n};\n\nexport default (props => {\n  const {\n    id,\n    text\n  } = props;\n  const work = useMemo(() => data.find(v => v.id === id), [id]);\n  if (!work) return null;\n  const {\n    0: fullScreen,\n    1: setFullScreen\n  } = useState(false);\n\n  const onFullScreen = bool => setFullScreen(bool);\n\n  return __jsx(WorkDetail, {\n    fullScreen: fullScreen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, __jsx(WorkHeader, {\n    work: work,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }), __jsx(ImagePane, {\n    onFullScreen: onFullScreen,\n    work: work,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }), __jsx(TextPane, {\n    work: work,\n    text: text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }));\n});","map":{"version":3,"sources":["/Users/juji/works/juji/components/WorkDetails/index.js"],"names":["React","useMemo","useState","data","styled","css","Link","Texts","useTransition","animated","ImagePaneComp","WorkDetail","div","p","fullScreen","WorkHeader","props","work","transitions","from","y","enter","leave","map","item","key","transform","interpolate","title","ImagePane","onFullScreen","x","images","TextPane","text","id","find","v","setFullScreen","bool"],"mappings":"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","sourcesContent":["import React, {useMemo, useState} from 'react'\nimport data from 'data/works'\nimport styled, { css } from 'styled-components'\nimport Link from 'next/link'\nimport Texts from './Texts'\nimport {useTransition, animated} from 'react-spring'\nimport ImagePaneComp from './ImagePane'\n\nconst WorkDetail = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n\n  @media only screen and (min-width: 1024px) {\n    height: 100vh;\n    overflow: hidden;\n  }\n\n  .work-header{\n    background: #000000;\n    flex: 0 0 auto;\n    display: flex;\n    align-items: center;\n    padding: 21px;\n    h1{\n      flex: 1 1 auto;\n      margin:0;\n      font-size: 21px;\n      font-family: 'Source Code Pro', monospace;\n    }\n    a{\n      flex: 0 0 auto;\n      margin:0;\n      font-size: 34px;\n    }\n    border-bottom: 1px solid #05101d;\n  }\n\n  .image-pane{\n    flex: 0 0 auto;\n    background: #03080e;\n  }\n\n  .text-pane{\n    flex: 1 1 auto;\n    box-sizing: border-box;\n    background-color: #010102;\n\n\n\n    .work-header{\n      display: none;\n    }\n  }\n\n  @media only screen and (min-width: 1024px) {\n    flex-direction: row;\n\n    &>.work-header{\n      display: none;\n    }\n\n    .image-pane{\n      flex: 1 1 auto;\n      padding-top:0;\n    }\n\n    .text-pane{\n      width: 37.31%;\n      flex: 0 0 auto;\n\n      .work-header{\n        display: flex;\n      }\n    }\n  }\n\n  ${p => p.fullScreen ? css`\n    .text-pane{\n      display: none;\n      flex: 1 1 auto;\n    }\n    .image-pane{{\n      flex: 1 1 auto;\n    }\n  ` : null}\n`\n\nconst WorkHeader = props => {\n\n  const { work } = props;\n  const transitions = useTransition(true, null, {\n    from: { y: -100 },\n    enter: { y: 0 },\n    leave: { y: -100 }\n  })\n\n  return transitions.map(({ item, key, props:{y} }) => item && <animated.div\n    key={key}\n    className=\"work-header\"\n    style={{\n      transform: y.interpolate((y) => `translate3d(0, ${y}%, 0)`)\n    }}\n  >\n    <h1>{work.title}</h1>\n    <Link href=\"/work\"><a>&times;</a></Link>\n  </animated.div>)\n}\n\nconst ImagePane = props => {\n  const { work, onFullScreen } = props;\n  const transitions = useTransition(true, null, {\n    from: { x: -100 },\n    enter: { x: 0 },\n    leave: { x: -100 }\n  })\n\n  return transitions.map(({ item, key, props: {x} }) => item && <animated.div\n    key={key}\n    className=\"image-pane\"\n    style={{\n      transform: x.interpolate((x) => `translate3d(${x}%, 0, 0)`)\n    }}\n  >\n    <ImagePaneComp onFullScreen={onFullScreen} images={work.images} />\n  </animated.div>)\n}\n\nconst TextPane = props => {\n  const { work, text } = props;\n  const transitions = useTransition(true, null, {\n    from: { x: 100 },\n    enter: { x: 0 },\n    leave: { x: 100 }\n  })\n\n  return transitions.map(({ item, key, props:{x} }) => item && <animated.div\n    key={key}\n    className=\"text-pane\"\n    style={{\n      transform: x.interpolate((x) => `translate3d(${x}%, 0, 0)`)\n    }}\n  >\n    <WorkHeader work={work} />\n    <Texts text={text} />\n  </animated.div>)\n}\n\nexport default props => {\n\n  const { id, text } = props;\n  const work = useMemo(() => data.find(v => v.id === id), [ id ])\n  if(!work) return null;\n\n  const [ fullScreen, setFullScreen ] = useState(false)\n  const onFullScreen = (bool) => setFullScreen(bool)\n\n  return <WorkDetail fullScreen={fullScreen}>\n    <WorkHeader work={work} />\n    <ImagePane onFullScreen={onFullScreen} work={work} />\n    <TextPane work={work} text={text} />\n  </WorkDetail>\n\n}\n"]},"metadata":{},"sourceType":"module"}