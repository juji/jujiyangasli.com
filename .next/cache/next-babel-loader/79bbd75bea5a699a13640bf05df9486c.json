{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useMemo, useState } from 'react';\nimport data from 'data/works';\nimport styled, { css } from 'styled-components';\nimport Link from 'next/link';\nimport Texts from './Texts';\nimport { useTransition, animated } from 'react-spring';\nimport ImagePaneComp from './ImagePane';\nconst WorkDetail = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n\n  @media only screen and (min-width: 1024px) {\n    height: 100vh;\n    overflow: hidden;\n  }\n\n  .work-header{\n    background: #000000;\n    flex: 0 0 auto;\n    display: flex;\n    align-items: center;\n    padding: 21px;\n    h1{\n      flex: 1 1 auto;\n      margin:0;\n      font-size: 21px;\n      font-family: 'Source Code Pro', monospace;\n    }\n    a{\n      flex: 0 0 auto;\n      margin:0;\n      font-size: 34px;\n    }\n    border-bottom: 1px solid #05101d;\n  }\n\n  .image-pane{\n    flex: 0 0 auto;\n    background: #03080e;\n  }\n\n  .text-pane{\n    flex: 1 1 auto;\n    box-sizing: border-box;\n    background-color: #010102;\n\n\n\n    .work-header{\n      display: none;\n    }\n  }\n\n  @media only screen and (min-width: 1024px) {\n    flex-direction: row;\n\n    &>.work-header{\n      display: none;\n    }\n\n    .image-pane{\n      flex: 1 1 auto;\n      padding-top:0;\n    }\n\n    .text-pane{\n      width: 37.31%;\n      flex: 0 0 auto;\n\n      .work-header{\n        display: flex;\n      }\n    }\n  }\n\n  ${p => p.fullScreen ? css`\n    .text-pane{\n      display: none;\n      flex: 1 1 auto;\n    }\n    .image-pane{{\n      flex: 1 1 auto;\n    }\n  ` : null}\n`;\n\nconst WorkHeader = props => {\n  const {\n    work\n  } = props;\n  const transitions = useTransition(true, null, {\n    from: {\n      y: -100\n    },\n    enter: {\n      y: 0\n    },\n    leave: {\n      y: -100\n    }\n  });\n  return transitions.map(({\n    item,\n    key,\n    props: {\n      y\n    }\n  }) => item && __jsx(animated.div, {\n    key: key,\n    className: \"work-header\",\n    style: {\n      transform: y.interpolate(y => `translate3d(0, ${y}%, 0)`)\n    }\n  }, __jsx(\"h1\", null, work.title), __jsx(Link, {\n    href: \"/work\"\n  }, __jsx(\"a\", null, \"\\xD7\"))));\n};\n\nconst ImagePane = props => {\n  const {\n    work,\n    onFullScreen\n  } = props;\n  const transitions = useTransition(true, null, {\n    from: {\n      x: -100\n    },\n    enter: {\n      x: 0\n    },\n    leave: {\n      x: -100\n    }\n  });\n  return transitions.map(({\n    item,\n    key,\n    props: {\n      x\n    }\n  }) => item && __jsx(animated.div, {\n    key: key,\n    className: \"image-pane\",\n    style: {\n      transform: x.interpolate(x => `translate3d(${x}%, 0, 0)`)\n    }\n  }, __jsx(ImagePaneComp, {\n    onFullScreen: onFullScreen,\n    images: work.images\n  })));\n};\n\nconst TextPane = props => {\n  const {\n    work,\n    text\n  } = props;\n  const transitions = useTransition(true, null, {\n    from: {\n      x: 100\n    },\n    enter: {\n      x: 0\n    },\n    leave: {\n      x: 100\n    }\n  });\n  return transitions.map(({\n    item,\n    key,\n    props: {\n      x\n    }\n  }) => item && __jsx(animated.div, {\n    key: key,\n    className: \"text-pane\",\n    style: {\n      transform: x.interpolate(x => `translate3d(${x}%, 0, 0)`)\n    }\n  }, __jsx(WorkHeader, {\n    work: work\n  }), __jsx(Texts, {\n    text: text\n  })));\n};\n\nexport default (props => {\n  const {\n    id,\n    text\n  } = props;\n  const work = useMemo(() => data.find(v => v.id === id), [id]);\n  if (!work) return null;\n  const {\n    0: fullScreen,\n    1: setFullScreen\n  } = useState(false);\n\n  const onFullScreen = bool => setFullScreen(bool);\n\n  return __jsx(WorkDetail, {\n    fullScreen: fullScreen\n  }, __jsx(WorkHeader, {\n    work: work\n  }), __jsx(ImagePane, {\n    onFullScreen: onFullScreen,\n    work: work\n  }), __jsx(TextPane, {\n    work: work,\n    text: text\n  }));\n});","map":null,"metadata":{},"sourceType":"module"}